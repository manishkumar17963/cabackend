"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = __importDefault(require("express"));
var admin_1 = require("../controllers/admin");
var auth_1 = __importDefault(require("../middleware/auth"));
var validateRequest_1 = __importDefault(require("../middleware/validateRequest"));
var admin_2 = __importDefault(require("../models/admin"));
var admin_3 = require("../schema/admin");
var common_1 = require("../schema/common");
var AdminRouter = express_1.default.Router();
AdminRouter.post("/signup", validateRequest_1.default(common_1.createAdminSchema), admin_1.createAdminHandler);
AdminRouter.post("/signup/verify", validateRequest_1.default(common_1.verifyPersonSchema), admin_1.verifyAdminHandler);
AdminRouter.post("/forgot/number", admin_1.forgotPasswordHandler);
AdminRouter.post("/forgot/verify/number", admin_1.verifyForgotOtpHandler);
AdminRouter.get("/status", auth_1.default(admin_2.default), admin_1.getStatusHandler);
AdminRouter.post("/login/web", validateRequest_1.default(common_1.webLoginSchema), admin_1.loginAdminHandler);
AdminRouter.post("/logout", admin_1.logoutAdminHandler);
AdminRouter.put("/employee/to/customer", [validateRequest_1.default(admin_3.assignEmployeeToCustomerSchema), auth_1.default(admin_2.default)], admin_1.assignEmployeeToCustomerHandler);
AdminRouter.post("/create/project", [validateRequest_1.default(admin_3.createProjectSchema), auth_1.default(admin_2.default)], admin_1.createProjectForCustomerHandler);
AdminRouter.put("/update/project", [validateRequest_1.default(admin_3.updateProjectSchema), auth_1.default(admin_2.default)], admin_1.updateProjectHandler);
AdminRouter.put("/assign/primary/employee", [validateRequest_1.default(admin_3.assignPrimaryEmployeeSchema), auth_1.default(admin_2.default)], admin_1.changePrimaryEmployeeHandler);
AdminRouter.post("/create/task", [validateRequest_1.default(admin_3.createTaskSchema), auth_1.default(admin_2.default)], admin_1.createTaskCustomerHandler);
AdminRouter.post("/update/task", [validateRequest_1.default(admin_3.updateTaskSchema), auth_1.default(admin_2.default)], admin_1.updateTaskHandler);
AdminRouter.put("/assign/task", [validateRequest_1.default(admin_3.assignTaskToEmployeeSchema), auth_1.default(admin_2.default)], admin_1.assignTaskToEmployeeHandler);
AdminRouter.put("/remove/task/employee/:taskId", [auth_1.default(admin_2.default)], admin_1.removeEmployeeFromTaskHandler);
AdminRouter.put("/remove/project/employee/:projectId", [auth_1.default(admin_2.default)], admin_1.removeEmployeeFromProjectHandler);
AdminRouter.put("/decline/task/:taskId", [auth_1.default(admin_2.default)], admin_1.declinedTaskHandler);
AdminRouter.put("/complete/project", [auth_1.default(admin_2.default)], admin_1.completeProjectHandler);
AdminRouter.put("/decline/project", [auth_1.default(admin_2.default)], admin_1.declinedProjectHandler);
AdminRouter.put("/update/project/status", [auth_1.default(admin_2.default)], admin_1.updateStatusHandler);
AdminRouter.post("/add/project/quotation", [validateRequest_1.default(admin_3.createQuotationSchema), auth_1.default(admin_2.default)], admin_1.addQuotationHandler);
AdminRouter.post("/add/project/invoice", [validateRequest_1.default(admin_3.createInvoiceSchema), auth_1.default(admin_2.default)], admin_1.addInvoiceHandler);
AdminRouter.put("/update/payment/status", [validateRequest_1.default(admin_3.changePaymentStatusManuallySchema), auth_1.default(admin_2.default)], admin_1.changePaymentStatusManuallyHandler);
AdminRouter.post("/add/comment", [validateRequest_1.default(admin_3.addCommentSchema), auth_1.default(admin_2.default)], admin_1.addCommentHandler);
AdminRouter.put("/approve/holiday", [validateRequest_1.default(admin_3.approveHolidaySchema), auth_1.default(admin_2.default)], admin_1.approveHolidayHandler);
AdminRouter.put("/deny/holiday", [validateRequest_1.default(admin_3.approveHolidaySchema), auth_1.default(admin_2.default)], admin_1.denyHolidayHandler);
AdminRouter.post("/add/meeting", [validateRequest_1.default(admin_3.requestMeetingSchema), auth_1.default(admin_2.default)], admin_1.requestMeetingHandler);
AdminRouter.put("/update/meeting", [validateRequest_1.default(admin_3.updateMeetingEmployeeSchema), auth_1.default(admin_2.default)], admin_1.updateEmployeeMeetingHandler);
AdminRouter.put("/decline/meeting/:meetingId", [auth_1.default(admin_2.default)], admin_1.declineMeetingHandler);
AdminRouter.put("/complete/meeting/:meetingId", [auth_1.default(admin_2.default)], admin_1.completeMeetingHandler);
AdminRouter.post("/add/holiday", [validateRequest_1.default(admin_3.addHolidaySchema), auth_1.default(admin_2.default)], admin_1.addHolidayHandler);
AdminRouter.delete("/remove/holiday", auth_1.default(admin_2.default), admin_1.removeHolidayHandler);
AdminRouter.post("/start/attendance", auth_1.default(admin_2.default), admin_1.startAttendanceHandler);
AdminRouter.put("/stop/attendance/:attendanceId", auth_1.default(admin_2.default), admin_1.stopAttendanceHandler);
AdminRouter.put("/toggle/attendance", [validateRequest_1.default(admin_3.toggleAttendanceSchema), auth_1.default(admin_2.default)], admin_1.toggleApprovalAttendanceHandler);
AdminRouter.post("/add/branch", [validateRequest_1.default(admin_3.addBranchSchema), auth_1.default(admin_2.default)], admin_1.createBranchHandler);
AdminRouter.post("/add/template", [validateRequest_1.default(admin_3.addTemplateSchema), auth_1.default(admin_2.default)], admin_1.createTemplateHandler);
AdminRouter.post("/assign/primary/employee", [validateRequest_1.default(admin_3.assignEmployeeToCustomerSchema), auth_1.default(admin_2.default)], admin_1.assignPrimaryEmployeeHandler);
AdminRouter.post("/add/sick/leave", [auth_1.default(admin_2.default)], admin_1.addEmployeeSickHandler);
AdminRouter.put("/update/sick/leave", [auth_1.default(admin_2.default)], admin_1.updateEmployeeSickHandler);
AdminRouter.post("/join/meeting", [auth_1.default(admin_2.default)], admin_1.adminConnectMeetingHandler);
exports.default = AdminRouter;
